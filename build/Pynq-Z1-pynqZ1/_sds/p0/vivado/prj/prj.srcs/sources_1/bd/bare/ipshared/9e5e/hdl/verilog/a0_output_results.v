// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_output_results (
        out_r_din,
        out_r_full_n,
        out_r_write,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_d0,
        buffer_r_q0,
        buffer_r_we0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_d1,
        buffer_r_q1,
        buffer_r_we1,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output  [7:0] out_r_din;
input   out_r_full_n;
output   out_r_write;
output  [3:0] buffer_r_address0;
output   buffer_r_ce0;
output  [4:0] buffer_r_d0;
input  [4:0] buffer_r_q0;
output   buffer_r_we0;
output  [3:0] buffer_r_address1;
output   buffer_r_ce1;
output  [4:0] buffer_r_d1;
input  [4:0] buffer_r_q1;
output   buffer_r_we1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    output_results_Loop_U0_ap_start;
wire    output_results_Loop_U0_ap_done;
wire    output_results_Loop_U0_ap_continue;
wire    output_results_Loop_U0_ap_idle;
wire    output_results_Loop_U0_ap_ready;
wire   [3:0] output_results_Loop_U0_buffer_r_address0;
wire    output_results_Loop_U0_buffer_r_ce0;
wire   [7:0] output_results_Loop_U0_out_r_din;
wire    output_results_Loop_U0_out_r_write;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    output_results_Loop_U0_start_full_n;
wire    output_results_Loop_U0_start_write;

a0_output_results_Loop_s output_results_Loop_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(output_results_Loop_U0_ap_start),
    .ap_done(output_results_Loop_U0_ap_done),
    .ap_continue(output_results_Loop_U0_ap_continue),
    .ap_idle(output_results_Loop_U0_ap_idle),
    .ap_ready(output_results_Loop_U0_ap_ready),
    .buffer_r_address0(output_results_Loop_U0_buffer_r_address0),
    .buffer_r_ce0(output_results_Loop_U0_buffer_r_ce0),
    .buffer_r_q0(buffer_r_q0),
    .out_r_din(output_results_Loop_U0_out_r_din),
    .out_r_full_n(out_r_full_n),
    .out_r_write(output_results_Loop_U0_out_r_write)
);

assign ap_done = output_results_Loop_U0_ap_done;

assign ap_idle = output_results_Loop_U0_ap_idle;

assign ap_ready = output_results_Loop_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = output_results_Loop_U0_ap_done;

assign ap_sync_ready = output_results_Loop_U0_ap_ready;

assign buffer_r_address0 = output_results_Loop_U0_buffer_r_address0;

assign buffer_r_address1 = 4'd0;

assign buffer_r_ce0 = output_results_Loop_U0_buffer_r_ce0;

assign buffer_r_ce1 = 1'b0;

assign buffer_r_d0 = 5'd0;

assign buffer_r_d1 = 5'd0;

assign buffer_r_we0 = 1'b0;

assign buffer_r_we1 = 1'b0;

assign out_r_din = output_results_Loop_U0_out_r_din;

assign out_r_write = output_results_Loop_U0_out_r_write;

assign output_results_Loop_U0_ap_continue = ap_continue;

assign output_results_Loop_U0_ap_start = ap_start;

assign output_results_Loop_U0_start_full_n = 1'b1;

assign output_results_Loop_U0_start_write = 1'b0;

endmodule //a0_output_results
