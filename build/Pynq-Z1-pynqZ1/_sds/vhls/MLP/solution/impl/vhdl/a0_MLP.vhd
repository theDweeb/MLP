-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_MLP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    image_r_empty_n : IN STD_LOGIC;
    image_r_read : OUT STD_LOGIC;
    l1_w_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    l1_w_empty_n : IN STD_LOGIC;
    l1_w_read : OUT STD_LOGIC;
    l1_b_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    l1_b_empty_n : IN STD_LOGIC;
    l1_b_read : OUT STD_LOGIC;
    l2_w_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    l2_w_empty_n : IN STD_LOGIC;
    l2_w_read : OUT STD_LOGIC;
    l2_b_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    l2_b_empty_n : IN STD_LOGIC;
    l2_b_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC );
end;


architecture behav of a0_MLP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_MLP,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.888000,HLS_SYN_LAT=317058,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=2,HLS_SYN_FF=470,HLS_SYN_LUT=1492,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv17_310 : STD_LOGIC_VECTOR (16 downto 0) := "00000001100010000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv25_10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal next_mul_fu_354_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_590 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_i_cast1_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_cast1_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_370_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_604 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_612 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond3_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal image_buf_load_reg_632 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal l1_w_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_w_buf_load_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_574_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sum_cast_fu_432_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_cast_reg_647 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_2_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_471_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_657 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_i1_cast1_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i1_cast1_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_487_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_679 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l1_output_buf_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l1_output_buf_load_reg_699 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal l2_w_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l2_w_buf_load_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_582_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum_2_fu_535_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_2_reg_714 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_4_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal image_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal image_buf_ce0 : STD_LOGIC;
    signal image_buf_we0 : STD_LOGIC;
    signal l1_w_buf_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal l1_w_buf_ce0 : STD_LOGIC;
    signal l1_w_buf_we0 : STD_LOGIC;
    signal l1_b_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal l1_b_buf_ce0 : STD_LOGIC;
    signal l1_b_buf_we0 : STD_LOGIC;
    signal l1_b_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal l1_output_buf_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal l1_output_buf_ce0 : STD_LOGIC;
    signal l1_output_buf_we0 : STD_LOGIC;
    signal l1_output_buf_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal l2_w_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal l2_w_buf_ce0 : STD_LOGIC;
    signal l2_w_buf_we0 : STD_LOGIC;
    signal l2_b_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal l2_b_buf_ce0 : STD_LOGIC;
    signal l2_b_buf_we0 : STD_LOGIC;
    signal l2_b_buf_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_buf_ce0 : STD_LOGIC;
    signal out_buf_we0 : STD_LOGIC;
    signal out_buf_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_buf_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_read_from_ddr_3_fu_307_input_r_read : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_buffer_r_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_read_from_ddr_3_fu_307_buffer_r_ce0 : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_3_fu_307_buffer_r_we0 : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_buffer_r_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_read_from_ddr_3_fu_307_buffer_r_ce1 : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_3_fu_307_buffer_r_we1 : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_ap_start : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_ap_done : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_ap_ready : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_ap_idle : STD_LOGIC;
    signal grp_read_from_ddr_3_fu_307_ap_continue : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_input_r_read : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_image_from_ddr_fu_315_buffer_r_ce0 : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_image_from_ddr_fu_315_buffer_r_we0 : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_image_from_ddr_fu_315_buffer_r_ce1 : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_image_from_ddr_fu_315_buffer_r_we1 : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_ap_start : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_ap_done : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_ap_ready : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_ap_idle : STD_LOGIC;
    signal grp_read_image_from_ddr_fu_315_ap_continue : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_input_r_read : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_from_ddr_1_fu_323_buffer_r_ce0 : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_1_fu_323_buffer_r_we0 : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_buffer_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_from_ddr_1_fu_323_buffer_r_ce1 : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_1_fu_323_buffer_r_we1 : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_ap_start : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_ap_done : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_ap_ready : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_ap_idle : STD_LOGIC;
    signal grp_read_from_ddr_1_fu_323_ap_continue : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_input_r_read : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_buffer_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_read_from_ddr_2_fu_331_buffer_r_ce0 : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_2_fu_331_buffer_r_we0 : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_buffer_r_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_read_from_ddr_2_fu_331_buffer_r_ce1 : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_2_fu_331_buffer_r_we1 : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_ap_start : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_ap_done : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_ap_ready : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_ap_idle : STD_LOGIC;
    signal grp_read_from_ddr_2_fu_331_ap_continue : STD_LOGIC;
    signal grp_output_results_fu_339_out_r_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_output_results_fu_339_out_r_write : STD_LOGIC;
    signal grp_output_results_fu_339_buffer_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_output_results_fu_339_buffer_r_ce0 : STD_LOGIC;
    signal grp_output_results_fu_339_buffer_r_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_output_results_fu_339_buffer_r_we0 : STD_LOGIC;
    signal grp_output_results_fu_339_buffer_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_output_results_fu_339_buffer_r_ce1 : STD_LOGIC;
    signal grp_output_results_fu_339_buffer_r_d1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_output_results_fu_339_buffer_r_we1 : STD_LOGIC;
    signal grp_output_results_fu_339_ap_start : STD_LOGIC;
    signal grp_output_results_fu_339_ap_done : STD_LOGIC;
    signal grp_output_results_fu_339_ap_ready : STD_LOGIC;
    signal grp_output_results_fu_339_ap_idle : STD_LOGIC;
    signal grp_output_results_fu_339_ap_continue : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_input_r_read : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_buffer_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_from_ddr_fu_346_buffer_r_ce0 : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_fu_346_buffer_r_we0 : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_buffer_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_from_ddr_fu_346_buffer_r_ce1 : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_buffer_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_read_from_ddr_fu_346_buffer_r_we1 : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_ap_start : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_ap_done : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_ap_ready : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_ap_idle : STD_LOGIC;
    signal grp_read_from_ddr_fu_346_ap_continue : STD_LOGIC;
    signal i_i_reg_215 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_read_image_from_ddr_fu_315_ap_ready : STD_LOGIC;
    signal ap_sync_grp_read_image_from_ddr_fu_315_ap_done : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_3_fu_307_ap_ready : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_3_fu_307_ap_done : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_2_fu_331_ap_ready : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_2_fu_331_ap_done : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_1_fu_323_ap_ready : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_1_fu_323_ap_done : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_fu_346_ap_ready : STD_LOGIC;
    signal ap_sync_grp_read_from_ddr_fu_346_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal phi_mul_reg_226 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum_i_reg_238 : STD_LOGIC_VECTOR (25 downto 0);
    signal exitcond1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_250 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_i1_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal phi_mul1_reg_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_i5_reg_284 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i6_reg_296 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_read_from_ddr_3_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done : STD_LOGIC := '0';
    signal grp_read_image_from_ddr_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done : STD_LOGIC := '0';
    signal grp_read_from_ddr_1_fu_323_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done : STD_LOGIC := '0';
    signal grp_read_from_ddr_2_fu_331_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done : STD_LOGIC := '0';
    signal grp_output_results_fu_339_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_sync_grp_output_results_fu_339_ap_ready : STD_LOGIC;
    signal ap_sync_grp_output_results_fu_339_ap_done : STD_LOGIC;
    signal ap_block_state15_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_output_results_fu_339_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_output_results_fu_339_ap_done : STD_LOGIC := '0';
    signal grp_read_from_ddr_fu_346_ap_start_reg : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_read_from_ddr_fu_346_ap_done : STD_LOGIC := '0';
    signal j_i_cast1_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_i_cast_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i6_cast1_fu_497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum4_i11_cast_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_cast_fu_376_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum4_i_fu_397_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_i_cast_fu_414_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_418_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_cast_fu_414_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_422_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_418_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sum_fu_426_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_i_fu_446_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_i_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_458_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_i6_cast_fu_493_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum4_i1_fu_514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i21_cast_cast_fu_531_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_i1_fu_549_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_i1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_561_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_582_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_574_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_582_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component a0_read_from_ddr_3 IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_read_image_from_ddr IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_read_from_ddr_1 IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_read_from_ddr_2 IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_output_results IS
    port (
        out_r_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_full_n : IN STD_LOGIC;
        out_r_write : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_read_from_ddr IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component a0_MLP_mac_muladd_8s_8ns_26ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component a0_MLP_mac_muladd_8s_5ns_20ns_20_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component a0_MLP_image_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_MLP_l1_w_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_MLP_l1_b_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_MLP_l1_output_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component a0_MLP_l2_w_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_MLP_l2_b_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_MLP_out_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    image_buf_U : component a0_MLP_image_buf
    generic map (
        DataWidth => 8,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => image_buf_address0,
        ce0 => image_buf_ce0,
        we0 => image_buf_we0,
        d0 => grp_read_image_from_ddr_fu_315_buffer_r_d0,
        q0 => image_buf_q0);

    l1_w_buf_U : component a0_MLP_l1_w_buf
    generic map (
        DataWidth => 8,
        AddressRange => 78400,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => l1_w_buf_address0,
        ce0 => l1_w_buf_ce0,
        we0 => l1_w_buf_we0,
        d0 => grp_read_from_ddr_3_fu_307_buffer_r_d0,
        q0 => l1_w_buf_q0);

    l1_b_buf_U : component a0_MLP_l1_b_buf
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => l1_b_buf_address0,
        ce0 => l1_b_buf_ce0,
        we0 => l1_b_buf_we0,
        d0 => grp_read_from_ddr_2_fu_331_buffer_r_d0,
        q0 => l1_b_buf_q0);

    l1_output_buf_U : component a0_MLP_l1_output_buf
    generic map (
        DataWidth => 5,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => l1_output_buf_address0,
        ce0 => l1_output_buf_ce0,
        we0 => l1_output_buf_we0,
        d0 => l1_output_buf_d0,
        q0 => l1_output_buf_q0);

    l2_w_buf_U : component a0_MLP_l2_w_buf
    generic map (
        DataWidth => 8,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => l2_w_buf_address0,
        ce0 => l2_w_buf_ce0,
        we0 => l2_w_buf_we0,
        d0 => grp_read_from_ddr_1_fu_323_buffer_r_d0,
        q0 => l2_w_buf_q0);

    l2_b_buf_U : component a0_MLP_l2_b_buf
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => l2_b_buf_address0,
        ce0 => l2_b_buf_ce0,
        we0 => l2_b_buf_we0,
        d0 => grp_read_from_ddr_fu_346_buffer_r_d0,
        q0 => l2_b_buf_q0);

    out_buf_U : component a0_MLP_out_buf
    generic map (
        DataWidth => 5,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_address0,
        ce0 => out_buf_ce0,
        we0 => out_buf_we0,
        d0 => out_buf_d0,
        q0 => out_buf_q0);

    grp_read_from_ddr_3_fu_307 : component a0_read_from_ddr_3
    port map (
        input_r_dout => l1_w_dout,
        input_r_empty_n => l1_w_empty_n,
        input_r_read => grp_read_from_ddr_3_fu_307_input_r_read,
        buffer_r_address0 => grp_read_from_ddr_3_fu_307_buffer_r_address0,
        buffer_r_ce0 => grp_read_from_ddr_3_fu_307_buffer_r_ce0,
        buffer_r_d0 => grp_read_from_ddr_3_fu_307_buffer_r_d0,
        buffer_r_q0 => ap_const_lv8_0,
        buffer_r_we0 => grp_read_from_ddr_3_fu_307_buffer_r_we0,
        buffer_r_address1 => grp_read_from_ddr_3_fu_307_buffer_r_address1,
        buffer_r_ce1 => grp_read_from_ddr_3_fu_307_buffer_r_ce1,
        buffer_r_d1 => grp_read_from_ddr_3_fu_307_buffer_r_d1,
        buffer_r_q1 => ap_const_lv8_0,
        buffer_r_we1 => grp_read_from_ddr_3_fu_307_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_from_ddr_3_fu_307_ap_start,
        ap_done => grp_read_from_ddr_3_fu_307_ap_done,
        ap_ready => grp_read_from_ddr_3_fu_307_ap_ready,
        ap_idle => grp_read_from_ddr_3_fu_307_ap_idle,
        ap_continue => grp_read_from_ddr_3_fu_307_ap_continue);

    grp_read_image_from_ddr_fu_315 : component a0_read_image_from_ddr
    port map (
        input_r_dout => image_r_dout,
        input_r_empty_n => image_r_empty_n,
        input_r_read => grp_read_image_from_ddr_fu_315_input_r_read,
        buffer_r_address0 => grp_read_image_from_ddr_fu_315_buffer_r_address0,
        buffer_r_ce0 => grp_read_image_from_ddr_fu_315_buffer_r_ce0,
        buffer_r_d0 => grp_read_image_from_ddr_fu_315_buffer_r_d0,
        buffer_r_q0 => ap_const_lv8_0,
        buffer_r_we0 => grp_read_image_from_ddr_fu_315_buffer_r_we0,
        buffer_r_address1 => grp_read_image_from_ddr_fu_315_buffer_r_address1,
        buffer_r_ce1 => grp_read_image_from_ddr_fu_315_buffer_r_ce1,
        buffer_r_d1 => grp_read_image_from_ddr_fu_315_buffer_r_d1,
        buffer_r_q1 => ap_const_lv8_0,
        buffer_r_we1 => grp_read_image_from_ddr_fu_315_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_image_from_ddr_fu_315_ap_start,
        ap_done => grp_read_image_from_ddr_fu_315_ap_done,
        ap_ready => grp_read_image_from_ddr_fu_315_ap_ready,
        ap_idle => grp_read_image_from_ddr_fu_315_ap_idle,
        ap_continue => grp_read_image_from_ddr_fu_315_ap_continue);

    grp_read_from_ddr_1_fu_323 : component a0_read_from_ddr_1
    port map (
        input_r_dout => l2_w_dout,
        input_r_empty_n => l2_w_empty_n,
        input_r_read => grp_read_from_ddr_1_fu_323_input_r_read,
        buffer_r_address0 => grp_read_from_ddr_1_fu_323_buffer_r_address0,
        buffer_r_ce0 => grp_read_from_ddr_1_fu_323_buffer_r_ce0,
        buffer_r_d0 => grp_read_from_ddr_1_fu_323_buffer_r_d0,
        buffer_r_q0 => ap_const_lv8_0,
        buffer_r_we0 => grp_read_from_ddr_1_fu_323_buffer_r_we0,
        buffer_r_address1 => grp_read_from_ddr_1_fu_323_buffer_r_address1,
        buffer_r_ce1 => grp_read_from_ddr_1_fu_323_buffer_r_ce1,
        buffer_r_d1 => grp_read_from_ddr_1_fu_323_buffer_r_d1,
        buffer_r_q1 => ap_const_lv8_0,
        buffer_r_we1 => grp_read_from_ddr_1_fu_323_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_from_ddr_1_fu_323_ap_start,
        ap_done => grp_read_from_ddr_1_fu_323_ap_done,
        ap_ready => grp_read_from_ddr_1_fu_323_ap_ready,
        ap_idle => grp_read_from_ddr_1_fu_323_ap_idle,
        ap_continue => grp_read_from_ddr_1_fu_323_ap_continue);

    grp_read_from_ddr_2_fu_331 : component a0_read_from_ddr_2
    port map (
        input_r_dout => l1_b_dout,
        input_r_empty_n => l1_b_empty_n,
        input_r_read => grp_read_from_ddr_2_fu_331_input_r_read,
        buffer_r_address0 => grp_read_from_ddr_2_fu_331_buffer_r_address0,
        buffer_r_ce0 => grp_read_from_ddr_2_fu_331_buffer_r_ce0,
        buffer_r_d0 => grp_read_from_ddr_2_fu_331_buffer_r_d0,
        buffer_r_q0 => ap_const_lv8_0,
        buffer_r_we0 => grp_read_from_ddr_2_fu_331_buffer_r_we0,
        buffer_r_address1 => grp_read_from_ddr_2_fu_331_buffer_r_address1,
        buffer_r_ce1 => grp_read_from_ddr_2_fu_331_buffer_r_ce1,
        buffer_r_d1 => grp_read_from_ddr_2_fu_331_buffer_r_d1,
        buffer_r_q1 => ap_const_lv8_0,
        buffer_r_we1 => grp_read_from_ddr_2_fu_331_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_from_ddr_2_fu_331_ap_start,
        ap_done => grp_read_from_ddr_2_fu_331_ap_done,
        ap_ready => grp_read_from_ddr_2_fu_331_ap_ready,
        ap_idle => grp_read_from_ddr_2_fu_331_ap_idle,
        ap_continue => grp_read_from_ddr_2_fu_331_ap_continue);

    grp_output_results_fu_339 : component a0_output_results
    port map (
        out_r_din => grp_output_results_fu_339_out_r_din,
        out_r_full_n => out_r_full_n,
        out_r_write => grp_output_results_fu_339_out_r_write,
        buffer_r_address0 => grp_output_results_fu_339_buffer_r_address0,
        buffer_r_ce0 => grp_output_results_fu_339_buffer_r_ce0,
        buffer_r_d0 => grp_output_results_fu_339_buffer_r_d0,
        buffer_r_q0 => out_buf_q0,
        buffer_r_we0 => grp_output_results_fu_339_buffer_r_we0,
        buffer_r_address1 => grp_output_results_fu_339_buffer_r_address1,
        buffer_r_ce1 => grp_output_results_fu_339_buffer_r_ce1,
        buffer_r_d1 => grp_output_results_fu_339_buffer_r_d1,
        buffer_r_q1 => ap_const_lv5_0,
        buffer_r_we1 => grp_output_results_fu_339_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_output_results_fu_339_ap_start,
        ap_done => grp_output_results_fu_339_ap_done,
        ap_ready => grp_output_results_fu_339_ap_ready,
        ap_idle => grp_output_results_fu_339_ap_idle,
        ap_continue => grp_output_results_fu_339_ap_continue);

    grp_read_from_ddr_fu_346 : component a0_read_from_ddr
    port map (
        input_r_dout => l2_b_dout,
        input_r_empty_n => l2_b_empty_n,
        input_r_read => grp_read_from_ddr_fu_346_input_r_read,
        buffer_r_address0 => grp_read_from_ddr_fu_346_buffer_r_address0,
        buffer_r_ce0 => grp_read_from_ddr_fu_346_buffer_r_ce0,
        buffer_r_d0 => grp_read_from_ddr_fu_346_buffer_r_d0,
        buffer_r_q0 => ap_const_lv8_0,
        buffer_r_we0 => grp_read_from_ddr_fu_346_buffer_r_we0,
        buffer_r_address1 => grp_read_from_ddr_fu_346_buffer_r_address1,
        buffer_r_ce1 => grp_read_from_ddr_fu_346_buffer_r_ce1,
        buffer_r_d1 => grp_read_from_ddr_fu_346_buffer_r_d1,
        buffer_r_q1 => ap_const_lv8_0,
        buffer_r_we1 => grp_read_from_ddr_fu_346_buffer_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_from_ddr_fu_346_ap_start,
        ap_done => grp_read_from_ddr_fu_346_ap_done,
        ap_ready => grp_read_from_ddr_fu_346_ap_ready,
        ap_idle => grp_read_from_ddr_fu_346_ap_idle,
        ap_continue => grp_read_from_ddr_fu_346_ap_continue);

    MLP_mac_muladd_8s_8ns_26ns_26_1_1_U25 : component a0_MLP_mac_muladd_8s_8ns_26ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => l1_w_buf_load_reg_637,
        din1 => grp_fu_574_p1,
        din2 => sum_i_reg_238,
        dout => grp_fu_574_p3);

    MLP_mac_muladd_8s_5ns_20ns_20_1_1_U26 : component a0_MLP_mac_muladd_8s_5ns_20ns_20_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => l2_w_buf_load_reg_704,
        din1 => grp_fu_582_p1,
        din2 => sum_i5_reg_284,
        dout => grp_fu_582_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_output_results_fu_339_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_output_results_fu_339_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_sync_reg_grp_output_results_fu_339_ap_done <= ap_const_logic_0;
                elsif ((grp_output_results_fu_339_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_output_results_fu_339_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_output_results_fu_339_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_output_results_fu_339_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_sync_reg_grp_output_results_fu_339_ap_ready <= ap_const_logic_0;
                elsif ((grp_output_results_fu_339_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_output_results_fu_339_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_1_fu_323_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_1_fu_323_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_2_fu_331_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_2_fu_331_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_3_fu_307_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_3_fu_307_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_fu_346_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_fu_346_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_fu_346_ap_done <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_fu_346_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_fu_346_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready <= ap_const_logic_0;
                elsif ((grp_read_from_ddr_fu_346_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done <= ap_const_logic_0;
                elsif ((grp_read_image_from_ddr_fu_315_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready <= ap_const_logic_0;
                elsif ((grp_read_image_from_ddr_fu_315_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_output_results_fu_339_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_output_results_fu_339_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_output_results_fu_339_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((exitcond2_fu_481_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    grp_output_results_fu_339_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_output_results_fu_339_ap_ready = ap_const_logic_1)) then 
                    grp_output_results_fu_339_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_from_ddr_1_fu_323_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_from_ddr_1_fu_323_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_read_from_ddr_1_fu_323_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_read_from_ddr_1_fu_323_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_from_ddr_1_fu_323_ap_ready = ap_const_logic_1)) then 
                    grp_read_from_ddr_1_fu_323_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_from_ddr_2_fu_331_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_from_ddr_2_fu_331_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_read_from_ddr_2_fu_331_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_read_from_ddr_2_fu_331_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_from_ddr_2_fu_331_ap_ready = ap_const_logic_1)) then 
                    grp_read_from_ddr_2_fu_331_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_from_ddr_3_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_from_ddr_3_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_read_from_ddr_3_fu_307_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_read_from_ddr_3_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_from_ddr_3_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_read_from_ddr_3_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_from_ddr_fu_346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_from_ddr_fu_346_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_read_from_ddr_fu_346_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_read_from_ddr_fu_346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_from_ddr_fu_346_ap_ready = ap_const_logic_1)) then 
                    grp_read_from_ddr_fu_346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_image_from_ddr_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_image_from_ddr_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_read_image_from_ddr_fu_315_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_read_image_from_ddr_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_image_from_ddr_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_read_image_from_ddr_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_i1_reg_261 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_i1_reg_261 <= i_2_reg_671;
            end if; 
        end if;
    end process;

    i_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i_reg_215 <= i_reg_604;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_215 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_i6_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_i6_reg_296 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_i6_reg_296 <= j_1_reg_679;
            end if; 
        end if;
    end process;

    j_i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_reg_250 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_i_reg_250 <= j_reg_612;
            end if; 
        end if;
    end process;

    phi_mul1_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_272 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_mul1_reg_272 <= next_mul2_reg_657;
            end if; 
        end if;
    end process;

    phi_mul_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_226 <= next_mul_reg_590;
            elsif (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_226 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    sum_i5_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                sum_i5_reg_284 <= ap_const_lv20_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_i5_reg_284 <= grp_fu_582_p3;
            end if; 
        end if;
    end process;

    sum_i_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_364_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_i_reg_238 <= ap_const_lv26_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_i_reg_238 <= grp_fu_574_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_671 <= i_2_fu_487_p2;
                    i_i1_cast1_reg_662(3 downto 0) <= i_i1_cast1_fu_477_p1(3 downto 0);
                next_mul2_reg_657 <= next_mul2_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    i_i_cast1_reg_595(6 downto 0) <= i_i_cast1_fu_360_p1(6 downto 0);
                i_reg_604 <= i_fu_370_p2;
                next_mul_reg_590 <= next_mul_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                image_buf_load_reg_632 <= image_buf_q0;
                l1_w_buf_load_reg_637 <= l1_w_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_1_reg_679 <= j_1_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_612 <= j_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                l1_output_buf_load_reg_699 <= l1_output_buf_q0;
                l2_w_buf_load_reg_704 <= l2_w_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sum_2_reg_714 <= sum_2_fu_535_p2;
                tmp_4_reg_719 <= sum_2_fu_535_p2(19 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sum_cast_reg_647 <= sum_cast_fu_432_p2;
                tmp_2_reg_652 <= sum_fu_426_p2(25 downto 25);
            end if;
        end if;
    end process;
    i_i_cast1_reg_595(31 downto 7) <= "0000000000000000000000000";
    i_i1_cast1_reg_662(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_385_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond_fu_502_p2, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, exitcond1_fu_364_p2, exitcond2_fu_481_p2, ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_364_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond3_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state9 => 
                if (((exitcond2_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state10 => 
                if (((exitcond_fu_502_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state15_on_subcall_done_assign_proc : process(ap_sync_grp_output_results_fu_339_ap_ready, ap_sync_grp_output_results_fu_339_ap_done)
    begin
                ap_block_state15_on_subcall_done <= ((ap_sync_grp_output_results_fu_339_ap_ready and ap_sync_grp_output_results_fu_339_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_read_image_from_ddr_fu_315_ap_ready, ap_sync_grp_read_image_from_ddr_fu_315_ap_done, ap_sync_grp_read_from_ddr_3_fu_307_ap_ready, ap_sync_grp_read_from_ddr_3_fu_307_ap_done, ap_sync_grp_read_from_ddr_2_fu_331_ap_ready, ap_sync_grp_read_from_ddr_2_fu_331_ap_done, ap_sync_grp_read_from_ddr_1_fu_323_ap_ready, ap_sync_grp_read_from_ddr_1_fu_323_ap_done, ap_sync_grp_read_from_ddr_fu_346_ap_ready, ap_sync_grp_read_from_ddr_fu_346_ap_done)
    begin
                ap_block_state2_on_subcall_done <= (((ap_sync_grp_read_from_ddr_fu_346_ap_ready and ap_sync_grp_read_from_ddr_fu_346_ap_done) = ap_const_logic_0) or ((ap_sync_grp_read_from_ddr_1_fu_323_ap_ready and ap_sync_grp_read_from_ddr_1_fu_323_ap_done) = ap_const_logic_0) or ((ap_sync_grp_read_from_ddr_2_fu_331_ap_ready and ap_sync_grp_read_from_ddr_2_fu_331_ap_done) = ap_const_logic_0) or ((ap_sync_grp_read_from_ddr_3_fu_307_ap_ready and ap_sync_grp_read_from_ddr_3_fu_307_ap_done) = ap_const_logic_0) or ((ap_sync_grp_read_image_from_ddr_fu_315_ap_ready and ap_sync_grp_read_image_from_ddr_fu_315_ap_done) = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_output_results_fu_339_ap_done <= (grp_output_results_fu_339_ap_done or ap_sync_reg_grp_output_results_fu_339_ap_done);
    ap_sync_grp_output_results_fu_339_ap_ready <= (grp_output_results_fu_339_ap_ready or ap_sync_reg_grp_output_results_fu_339_ap_ready);
    ap_sync_grp_read_from_ddr_1_fu_323_ap_done <= (grp_read_from_ddr_1_fu_323_ap_done or ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_done);
    ap_sync_grp_read_from_ddr_1_fu_323_ap_ready <= (grp_read_from_ddr_1_fu_323_ap_ready or ap_sync_reg_grp_read_from_ddr_1_fu_323_ap_ready);
    ap_sync_grp_read_from_ddr_2_fu_331_ap_done <= (grp_read_from_ddr_2_fu_331_ap_done or ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_done);
    ap_sync_grp_read_from_ddr_2_fu_331_ap_ready <= (grp_read_from_ddr_2_fu_331_ap_ready or ap_sync_reg_grp_read_from_ddr_2_fu_331_ap_ready);
    ap_sync_grp_read_from_ddr_3_fu_307_ap_done <= (grp_read_from_ddr_3_fu_307_ap_done or ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_done);
    ap_sync_grp_read_from_ddr_3_fu_307_ap_ready <= (grp_read_from_ddr_3_fu_307_ap_ready or ap_sync_reg_grp_read_from_ddr_3_fu_307_ap_ready);
    ap_sync_grp_read_from_ddr_fu_346_ap_done <= (grp_read_from_ddr_fu_346_ap_done or ap_sync_reg_grp_read_from_ddr_fu_346_ap_done);
    ap_sync_grp_read_from_ddr_fu_346_ap_ready <= (grp_read_from_ddr_fu_346_ap_ready or ap_sync_reg_grp_read_from_ddr_fu_346_ap_ready);
    ap_sync_grp_read_image_from_ddr_fu_315_ap_done <= (grp_read_image_from_ddr_fu_315_ap_done or ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_done);
    ap_sync_grp_read_image_from_ddr_fu_315_ap_ready <= (grp_read_image_from_ddr_fu_315_ap_ready or ap_sync_reg_grp_read_image_from_ddr_fu_315_ap_ready);
    exitcond1_fu_364_p2 <= "1" when (i_i_reg_215 = ap_const_lv7_64) else "0";
    exitcond2_fu_481_p2 <= "1" when (i_i1_reg_261 = ap_const_lv4_A) else "0";
    exitcond3_fu_385_p2 <= "1" when (j_i_reg_250 = ap_const_lv10_310) else "0";
    exitcond_fu_502_p2 <= "1" when (j_i6_reg_296 = ap_const_lv7_64) else "0";
    grp_fu_574_p1 <= grp_fu_574_p10(8 - 1 downto 0);
    grp_fu_574_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_buf_load_reg_632),16));
    grp_fu_582_p1 <= grp_fu_582_p10(5 - 1 downto 0);
    grp_fu_582_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l1_output_buf_load_reg_699),13));

    grp_output_results_fu_339_ap_continue_assign_proc : process(ap_CS_fsm_state15, ap_block_state15_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state15_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_output_results_fu_339_ap_continue <= ap_const_logic_1;
        else 
            grp_output_results_fu_339_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_output_results_fu_339_ap_start <= grp_output_results_fu_339_ap_start_reg;

    grp_read_from_ddr_1_fu_323_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_read_from_ddr_1_fu_323_ap_continue <= ap_const_logic_1;
        else 
            grp_read_from_ddr_1_fu_323_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_from_ddr_1_fu_323_ap_start <= grp_read_from_ddr_1_fu_323_ap_start_reg;

    grp_read_from_ddr_2_fu_331_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_read_from_ddr_2_fu_331_ap_continue <= ap_const_logic_1;
        else 
            grp_read_from_ddr_2_fu_331_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_from_ddr_2_fu_331_ap_start <= grp_read_from_ddr_2_fu_331_ap_start_reg;

    grp_read_from_ddr_3_fu_307_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_read_from_ddr_3_fu_307_ap_continue <= ap_const_logic_1;
        else 
            grp_read_from_ddr_3_fu_307_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_from_ddr_3_fu_307_ap_start <= grp_read_from_ddr_3_fu_307_ap_start_reg;

    grp_read_from_ddr_fu_346_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_read_from_ddr_fu_346_ap_continue <= ap_const_logic_1;
        else 
            grp_read_from_ddr_fu_346_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_from_ddr_fu_346_ap_start <= grp_read_from_ddr_fu_346_ap_start_reg;

    grp_read_image_from_ddr_fu_315_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_read_image_from_ddr_fu_315_ap_continue <= ap_const_logic_1;
        else 
            grp_read_image_from_ddr_fu_315_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_read_image_from_ddr_fu_315_ap_start <= grp_read_image_from_ddr_fu_315_ap_start_reg;
    i_2_fu_487_p2 <= std_logic_vector(unsigned(i_i1_reg_261) + unsigned(ap_const_lv4_1));
    i_fu_370_p2 <= std_logic_vector(unsigned(i_i_reg_215) + unsigned(ap_const_lv7_1));
    i_i1_cast1_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i1_reg_261),32));
    i_i_cast1_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_215),32));

    image_buf_address0_assign_proc : process(ap_CS_fsm_state4, grp_read_image_from_ddr_fu_315_buffer_r_address0, ap_CS_fsm_state2, j_i_cast1_fu_380_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_buf_address0 <= j_i_cast1_fu_380_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_buf_address0 <= grp_read_image_from_ddr_fu_315_buffer_r_address0;
        else 
            image_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    image_buf_ce0_assign_proc : process(ap_CS_fsm_state4, grp_read_image_from_ddr_fu_315_buffer_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            image_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_buf_ce0 <= grp_read_image_from_ddr_fu_315_buffer_r_ce0;
        else 
            image_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_buf_we0_assign_proc : process(grp_read_image_from_ddr_fu_315_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_buf_we0 <= grp_read_image_from_ddr_fu_315_buffer_r_we0;
        else 
            image_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_read_assign_proc : process(grp_read_image_from_ddr_fu_315_input_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            image_r_read <= grp_read_image_from_ddr_fu_315_input_r_read;
        else 
            image_r_read <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_508_p2 <= std_logic_vector(unsigned(j_i6_reg_296) + unsigned(ap_const_lv7_1));
    j_fu_391_p2 <= std_logic_vector(unsigned(j_i_reg_250) + unsigned(ap_const_lv10_1));
    j_i6_cast1_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i6_reg_296),32));
    j_i6_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i6_reg_296),10));
    j_i_cast1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_250),32));
    j_i_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_250),17));

    l1_b_buf_address0_assign_proc : process(i_i_cast1_reg_595, ap_CS_fsm_state4, grp_read_from_ddr_2_fu_331_buffer_r_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_b_buf_address0 <= i_i_cast1_reg_595(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_b_buf_address0 <= grp_read_from_ddr_2_fu_331_buffer_r_address0;
        else 
            l1_b_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    l1_b_buf_ce0_assign_proc : process(ap_CS_fsm_state4, grp_read_from_ddr_2_fu_331_buffer_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_b_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_b_buf_ce0 <= grp_read_from_ddr_2_fu_331_buffer_r_ce0;
        else 
            l1_b_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_b_buf_we0_assign_proc : process(grp_read_from_ddr_2_fu_331_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_b_buf_we0 <= grp_read_from_ddr_2_fu_331_buffer_r_we0;
        else 
            l1_b_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_b_read_assign_proc : process(grp_read_from_ddr_2_fu_331_input_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_b_read <= grp_read_from_ddr_2_fu_331_input_r_read;
        else 
            l1_b_read <= ap_const_logic_0;
        end if; 
    end process;


    l1_output_buf_address0_assign_proc : process(i_i_cast1_reg_595, ap_CS_fsm_state10, ap_CS_fsm_state8, j_i6_cast1_fu_497_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            l1_output_buf_address0 <= j_i6_cast1_fu_497_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            l1_output_buf_address0 <= i_i_cast1_reg_595(7 - 1 downto 0);
        else 
            l1_output_buf_address0 <= "XXXXXXX";
        end if; 
    end process;


    l1_output_buf_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            l1_output_buf_ce0 <= ap_const_logic_1;
        else 
            l1_output_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l1_output_buf_d0 <= 
        ap_const_lv5_10 when (tmp_8_i_fu_452_p2(0) = '1') else 
        tmp_3_fu_458_p1;

    l1_output_buf_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            l1_output_buf_we0 <= ap_const_logic_1;
        else 
            l1_output_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_w_buf_address0_assign_proc : process(ap_CS_fsm_state4, grp_read_from_ddr_3_fu_307_buffer_r_address0, ap_CS_fsm_state2, sum4_i_cast_fu_403_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_w_buf_address0 <= sum4_i_cast_fu_403_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_w_buf_address0 <= grp_read_from_ddr_3_fu_307_buffer_r_address0;
        else 
            l1_w_buf_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    l1_w_buf_ce0_assign_proc : process(ap_CS_fsm_state4, grp_read_from_ddr_3_fu_307_buffer_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            l1_w_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_w_buf_ce0 <= grp_read_from_ddr_3_fu_307_buffer_r_ce0;
        else 
            l1_w_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_w_buf_we0_assign_proc : process(grp_read_from_ddr_3_fu_307_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_w_buf_we0 <= grp_read_from_ddr_3_fu_307_buffer_r_we0;
        else 
            l1_w_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l1_w_read_assign_proc : process(grp_read_from_ddr_3_fu_307_input_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l1_w_read <= grp_read_from_ddr_3_fu_307_input_r_read;
        else 
            l1_w_read <= ap_const_logic_0;
        end if; 
    end process;


    l2_b_buf_address0_assign_proc : process(i_i1_cast1_reg_662, ap_CS_fsm_state10, grp_read_from_ddr_fu_346_buffer_r_address0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            l2_b_buf_address0 <= i_i1_cast1_reg_662(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_b_buf_address0 <= grp_read_from_ddr_fu_346_buffer_r_address0;
        else 
            l2_b_buf_address0 <= "XXXX";
        end if; 
    end process;


    l2_b_buf_ce0_assign_proc : process(ap_CS_fsm_state10, grp_read_from_ddr_fu_346_buffer_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            l2_b_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_b_buf_ce0 <= grp_read_from_ddr_fu_346_buffer_r_ce0;
        else 
            l2_b_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l2_b_buf_we0_assign_proc : process(grp_read_from_ddr_fu_346_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_b_buf_we0 <= grp_read_from_ddr_fu_346_buffer_r_we0;
        else 
            l2_b_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l2_b_read_assign_proc : process(grp_read_from_ddr_fu_346_input_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_b_read <= grp_read_from_ddr_fu_346_input_r_read;
        else 
            l2_b_read <= ap_const_logic_0;
        end if; 
    end process;


    l2_w_buf_address0_assign_proc : process(ap_CS_fsm_state10, grp_read_from_ddr_1_fu_323_buffer_r_address0, ap_CS_fsm_state2, sum4_i11_cast_fu_520_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            l2_w_buf_address0 <= sum4_i11_cast_fu_520_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_w_buf_address0 <= grp_read_from_ddr_1_fu_323_buffer_r_address0;
        else 
            l2_w_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    l2_w_buf_ce0_assign_proc : process(ap_CS_fsm_state10, grp_read_from_ddr_1_fu_323_buffer_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            l2_w_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_w_buf_ce0 <= grp_read_from_ddr_1_fu_323_buffer_r_ce0;
        else 
            l2_w_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    l2_w_buf_we0_assign_proc : process(grp_read_from_ddr_1_fu_323_buffer_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_w_buf_we0 <= grp_read_from_ddr_1_fu_323_buffer_r_we0;
        else 
            l2_w_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    l2_w_read_assign_proc : process(grp_read_from_ddr_1_fu_323_input_r_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            l2_w_read <= grp_read_from_ddr_1_fu_323_input_r_read;
        else 
            l2_w_read <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_471_p2 <= std_logic_vector(unsigned(phi_mul1_reg_272) + unsigned(ap_const_lv10_64));
    next_mul_fu_354_p2 <= std_logic_vector(unsigned(phi_mul_reg_226) + unsigned(ap_const_lv17_310));

    out_buf_address0_assign_proc : process(i_i1_cast1_reg_662, grp_output_results_fu_339_buffer_r_address0, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_address0 <= i_i1_cast1_reg_662(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_buf_address0 <= grp_output_results_fu_339_buffer_r_address0;
        else 
            out_buf_address0 <= "XXXX";
        end if; 
    end process;


    out_buf_ce0_assign_proc : process(grp_output_results_fu_339_buffer_r_ce0, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_buf_ce0 <= grp_output_results_fu_339_buffer_r_ce0;
        else 
            out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_d0 <= 
        ap_const_lv5_10 when (tmp_8_i1_fu_555_p2(0) = '1') else 
        tmp_5_fu_561_p1;

    out_buf_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_buf_we0 <= ap_const_logic_1;
        else 
            out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_din <= grp_output_results_fu_339_out_r_din;

    out_r_write_assign_proc : process(grp_output_results_fu_339_out_r_write, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_write <= grp_output_results_fu_339_out_r_write;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_i1_fu_549_p3 <= 
        ap_const_lv20_0 when (tmp_4_reg_719(0) = '1') else 
        sum_2_reg_714;
    p_i_fu_446_p3 <= 
        ap_const_lv25_0 when (tmp_2_reg_652(0) = '1') else 
        sum_cast_reg_647;
    sum4_i11_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_i1_fu_514_p2),32));
    sum4_i1_fu_514_p2 <= std_logic_vector(unsigned(phi_mul1_reg_272) + unsigned(j_i6_cast_fu_493_p1));
    sum4_i_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_i_fu_397_p2),32));
    sum4_i_fu_397_p2 <= std_logic_vector(unsigned(phi_mul_reg_226) + unsigned(j_i_cast_fu_376_p1));
    sum_2_fu_535_p2 <= std_logic_vector(unsigned(sum_i5_reg_284) + unsigned(tmp_i21_cast_cast_fu_531_p1));
    sum_cast_fu_432_p2 <= std_logic_vector(unsigned(tmp_1_fu_422_p1) + unsigned(tmp_fu_418_p1));
    sum_fu_426_p2 <= std_logic_vector(signed(tmp_i_cast_fu_414_p1) + signed(sum_i_reg_238));
    tmp_1_fu_422_p1 <= sum_i_reg_238(25 - 1 downto 0);
    tmp_3_fu_458_p1 <= p_i_fu_446_p3(5 - 1 downto 0);
    tmp_5_fu_561_p1 <= p_i1_fu_549_p3(5 - 1 downto 0);
    tmp_8_i1_fu_555_p2 <= "1" when (unsigned(p_i1_fu_549_p3) > unsigned(ap_const_lv20_10)) else "0";
    tmp_8_i_fu_452_p2 <= "1" when (unsigned(p_i_fu_446_p3) > unsigned(ap_const_lv25_10)) else "0";
    tmp_fu_418_p0 <= l1_b_buf_q0;
        tmp_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_418_p0),25));

        tmp_i21_cast_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(l2_b_buf_q0),20));

    tmp_i_cast_fu_414_p0 <= l1_b_buf_q0;
        tmp_i_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_i_cast_fu_414_p0),26));

end behav;
