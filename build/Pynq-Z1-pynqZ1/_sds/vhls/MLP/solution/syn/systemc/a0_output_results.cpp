// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_output_results.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<8> a0_output_results::ap_const_lv8_0 = "00000000";
const sc_logic a0_output_results::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> a0_output_results::ap_const_lv4_0 = "0000";
const sc_lv<5> a0_output_results::ap_const_lv5_0 = "00000";
const sc_logic a0_output_results::ap_const_logic_1 = sc_dt::Log_1;

a0_output_results::a0_output_results(sc_module_name name) : sc_module(name), mVcdFile(0) {
    output_results_Loop_U0 = new a0_output_results_Loop_s("output_results_Loop_U0");
    output_results_Loop_U0->ap_clk(ap_clk);
    output_results_Loop_U0->ap_rst(ap_rst);
    output_results_Loop_U0->ap_start(output_results_Loop_U0_ap_start);
    output_results_Loop_U0->ap_done(output_results_Loop_U0_ap_done);
    output_results_Loop_U0->ap_continue(output_results_Loop_U0_ap_continue);
    output_results_Loop_U0->ap_idle(output_results_Loop_U0_ap_idle);
    output_results_Loop_U0->ap_ready(output_results_Loop_U0_ap_ready);
    output_results_Loop_U0->buffer_r_address0(output_results_Loop_U0_buffer_r_address0);
    output_results_Loop_U0->buffer_r_ce0(output_results_Loop_U0_buffer_r_ce0);
    output_results_Loop_U0->buffer_r_q0(buffer_r_q0);
    output_results_Loop_U0->out_r_din(output_results_Loop_U0_out_r_din);
    output_results_Loop_U0->out_r_full_n(out_r_full_n);
    output_results_Loop_U0->out_r_write(output_results_Loop_U0_out_r_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( output_results_Loop_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( output_results_Loop_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( output_results_Loop_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( output_results_Loop_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( output_results_Loop_U0_ap_ready );

    SC_METHOD(thread_buffer_r_address0);
    sensitive << ( output_results_Loop_U0_buffer_r_address0 );

    SC_METHOD(thread_buffer_r_address1);

    SC_METHOD(thread_buffer_r_ce0);
    sensitive << ( output_results_Loop_U0_buffer_r_ce0 );

    SC_METHOD(thread_buffer_r_ce1);

    SC_METHOD(thread_buffer_r_d0);

    SC_METHOD(thread_buffer_r_d1);

    SC_METHOD(thread_buffer_r_we0);

    SC_METHOD(thread_buffer_r_we1);

    SC_METHOD(thread_out_r_din);
    sensitive << ( output_results_Loop_U0_out_r_din );

    SC_METHOD(thread_out_r_write);
    sensitive << ( output_results_Loop_U0_out_r_write );

    SC_METHOD(thread_output_results_Loop_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_output_results_Loop_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_output_results_Loop_U0_start_full_n);

    SC_METHOD(thread_output_results_Loop_U0_start_write);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_output_results_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, out_r_din, "(port)out_r_din");
    sc_trace(mVcdFile, out_r_full_n, "(port)out_r_full_n");
    sc_trace(mVcdFile, out_r_write, "(port)out_r_write");
    sc_trace(mVcdFile, buffer_r_address0, "(port)buffer_r_address0");
    sc_trace(mVcdFile, buffer_r_ce0, "(port)buffer_r_ce0");
    sc_trace(mVcdFile, buffer_r_d0, "(port)buffer_r_d0");
    sc_trace(mVcdFile, buffer_r_q0, "(port)buffer_r_q0");
    sc_trace(mVcdFile, buffer_r_we0, "(port)buffer_r_we0");
    sc_trace(mVcdFile, buffer_r_address1, "(port)buffer_r_address1");
    sc_trace(mVcdFile, buffer_r_ce1, "(port)buffer_r_ce1");
    sc_trace(mVcdFile, buffer_r_d1, "(port)buffer_r_d1");
    sc_trace(mVcdFile, buffer_r_q1, "(port)buffer_r_q1");
    sc_trace(mVcdFile, buffer_r_we1, "(port)buffer_r_we1");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, output_results_Loop_U0_ap_start, "output_results_Loop_U0_ap_start");
    sc_trace(mVcdFile, output_results_Loop_U0_ap_done, "output_results_Loop_U0_ap_done");
    sc_trace(mVcdFile, output_results_Loop_U0_ap_continue, "output_results_Loop_U0_ap_continue");
    sc_trace(mVcdFile, output_results_Loop_U0_ap_idle, "output_results_Loop_U0_ap_idle");
    sc_trace(mVcdFile, output_results_Loop_U0_ap_ready, "output_results_Loop_U0_ap_ready");
    sc_trace(mVcdFile, output_results_Loop_U0_buffer_r_address0, "output_results_Loop_U0_buffer_r_address0");
    sc_trace(mVcdFile, output_results_Loop_U0_buffer_r_ce0, "output_results_Loop_U0_buffer_r_ce0");
    sc_trace(mVcdFile, output_results_Loop_U0_out_r_din, "output_results_Loop_U0_out_r_din");
    sc_trace(mVcdFile, output_results_Loop_U0_out_r_write, "output_results_Loop_U0_out_r_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, output_results_Loop_U0_start_full_n, "output_results_Loop_U0_start_full_n");
    sc_trace(mVcdFile, output_results_Loop_U0_start_write, "output_results_Loop_U0_start_write");
#endif

    }
}

a0_output_results::~a0_output_results() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete output_results_Loop_U0;
}

void a0_output_results::thread_ap_done() {
    ap_done = output_results_Loop_U0_ap_done.read();
}

void a0_output_results::thread_ap_idle() {
    ap_idle = output_results_Loop_U0_ap_idle.read();
}

void a0_output_results::thread_ap_ready() {
    ap_ready = output_results_Loop_U0_ap_ready.read();
}

void a0_output_results::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void a0_output_results::thread_ap_sync_done() {
    ap_sync_done = output_results_Loop_U0_ap_done.read();
}

void a0_output_results::thread_ap_sync_ready() {
    ap_sync_ready = output_results_Loop_U0_ap_ready.read();
}

void a0_output_results::thread_buffer_r_address0() {
    buffer_r_address0 = output_results_Loop_U0_buffer_r_address0.read();
}

void a0_output_results::thread_buffer_r_address1() {
    buffer_r_address1 = ap_const_lv4_0;
}

void a0_output_results::thread_buffer_r_ce0() {
    buffer_r_ce0 = output_results_Loop_U0_buffer_r_ce0.read();
}

void a0_output_results::thread_buffer_r_ce1() {
    buffer_r_ce1 = ap_const_logic_0;
}

void a0_output_results::thread_buffer_r_d0() {
    buffer_r_d0 = ap_const_lv5_0;
}

void a0_output_results::thread_buffer_r_d1() {
    buffer_r_d1 = ap_const_lv5_0;
}

void a0_output_results::thread_buffer_r_we0() {
    buffer_r_we0 = ap_const_logic_0;
}

void a0_output_results::thread_buffer_r_we1() {
    buffer_r_we1 = ap_const_logic_0;
}

void a0_output_results::thread_out_r_din() {
    out_r_din = output_results_Loop_U0_out_r_din.read();
}

void a0_output_results::thread_out_r_write() {
    out_r_write = output_results_Loop_U0_out_r_write.read();
}

void a0_output_results::thread_output_results_Loop_U0_ap_continue() {
    output_results_Loop_U0_ap_continue = ap_continue.read();
}

void a0_output_results::thread_output_results_Loop_U0_ap_start() {
    output_results_Loop_U0_ap_start = ap_start.read();
}

void a0_output_results::thread_output_results_Loop_U0_start_full_n() {
    output_results_Loop_U0_start_full_n = ap_const_logic_1;
}

void a0_output_results::thread_output_results_Loop_U0_start_write() {
    output_results_Loop_U0_start_write = ap_const_logic_0;
}

}

