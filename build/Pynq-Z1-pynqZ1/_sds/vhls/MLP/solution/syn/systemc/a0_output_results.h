// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_output_results_HH_
#define _a0_output_results_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "a0_output_results_Loop_s.h"

namespace ap_rtl {

struct a0_output_results : public sc_module {
    // Port declarations 20
    sc_out< sc_lv<8> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;
    sc_out< sc_lv<4> > buffer_r_address0;
    sc_out< sc_logic > buffer_r_ce0;
    sc_out< sc_lv<5> > buffer_r_d0;
    sc_in< sc_lv<5> > buffer_r_q0;
    sc_out< sc_logic > buffer_r_we0;
    sc_out< sc_lv<4> > buffer_r_address1;
    sc_out< sc_logic > buffer_r_ce1;
    sc_out< sc_lv<5> > buffer_r_d1;
    sc_in< sc_lv<5> > buffer_r_q1;
    sc_out< sc_logic > buffer_r_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;


    // Module declarations
    a0_output_results(sc_module_name name);
    SC_HAS_PROCESS(a0_output_results);

    ~a0_output_results();

    sc_trace_file* mVcdFile;

    a0_output_results_Loop_s* output_results_Loop_U0;
    sc_signal< sc_logic > output_results_Loop_U0_ap_start;
    sc_signal< sc_logic > output_results_Loop_U0_ap_done;
    sc_signal< sc_logic > output_results_Loop_U0_ap_continue;
    sc_signal< sc_logic > output_results_Loop_U0_ap_idle;
    sc_signal< sc_logic > output_results_Loop_U0_ap_ready;
    sc_signal< sc_lv<4> > output_results_Loop_U0_buffer_r_address0;
    sc_signal< sc_logic > output_results_Loop_U0_buffer_r_ce0;
    sc_signal< sc_lv<8> > output_results_Loop_U0_out_r_din;
    sc_signal< sc_logic > output_results_Loop_U0_out_r_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > output_results_Loop_U0_start_full_n;
    sc_signal< sc_logic > output_results_Loop_U0_start_write;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_buffer_r_address0();
    void thread_buffer_r_address1();
    void thread_buffer_r_ce0();
    void thread_buffer_r_ce1();
    void thread_buffer_r_d0();
    void thread_buffer_r_d1();
    void thread_buffer_r_we0();
    void thread_buffer_r_we1();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_output_results_Loop_U0_ap_continue();
    void thread_output_results_Loop_U0_ap_start();
    void thread_output_results_Loop_U0_start_full_n();
    void thread_output_results_Loop_U0_start_write();
};

}

using namespace ap_rtl;

#endif
