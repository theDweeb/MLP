-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_read_image_from_ddr is
port (
    input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_r_empty_n : IN STD_LOGIC;
    input_r_read : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of a0_read_image_from_ddr is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal read_image_from_ddr_U0_ap_start : STD_LOGIC;
    signal read_image_from_ddr_U0_ap_done : STD_LOGIC;
    signal read_image_from_ddr_U0_ap_continue : STD_LOGIC;
    signal read_image_from_ddr_U0_ap_idle : STD_LOGIC;
    signal read_image_from_ddr_U0_ap_ready : STD_LOGIC;
    signal read_image_from_ddr_U0_input_r_read : STD_LOGIC;
    signal read_image_from_ddr_U0_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal read_image_from_ddr_U0_buffer_r_ce0 : STD_LOGIC;
    signal read_image_from_ddr_U0_buffer_r_we0 : STD_LOGIC;
    signal read_image_from_ddr_U0_buffer_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal read_image_from_ddr_U0_start_full_n : STD_LOGIC;
    signal read_image_from_ddr_U0_start_write : STD_LOGIC;

    component a0_read_image_from_ddr_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    read_image_from_ddr_U0 : component a0_read_image_from_ddr_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_image_from_ddr_U0_ap_start,
        ap_done => read_image_from_ddr_U0_ap_done,
        ap_continue => read_image_from_ddr_U0_ap_continue,
        ap_idle => read_image_from_ddr_U0_ap_idle,
        ap_ready => read_image_from_ddr_U0_ap_ready,
        input_r_dout => input_r_dout,
        input_r_empty_n => input_r_empty_n,
        input_r_read => read_image_from_ddr_U0_input_r_read,
        buffer_r_address0 => read_image_from_ddr_U0_buffer_r_address0,
        buffer_r_ce0 => read_image_from_ddr_U0_buffer_r_ce0,
        buffer_r_we0 => read_image_from_ddr_U0_buffer_r_we0,
        buffer_r_d0 => read_image_from_ddr_U0_buffer_r_d0);




    ap_done <= read_image_from_ddr_U0_ap_done;
    ap_idle <= read_image_from_ddr_U0_ap_idle;
    ap_ready <= read_image_from_ddr_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= read_image_from_ddr_U0_ap_done;
    ap_sync_ready <= read_image_from_ddr_U0_ap_ready;
    buffer_r_address0 <= read_image_from_ddr_U0_buffer_r_address0;
    buffer_r_address1 <= ap_const_lv10_0;
    buffer_r_ce0 <= read_image_from_ddr_U0_buffer_r_ce0;
    buffer_r_ce1 <= ap_const_logic_0;
    buffer_r_d0 <= read_image_from_ddr_U0_buffer_r_d0;
    buffer_r_d1 <= ap_const_lv8_0;
    buffer_r_we0 <= read_image_from_ddr_U0_buffer_r_we0;
    buffer_r_we1 <= ap_const_logic_0;
    input_r_read <= read_image_from_ddr_U0_input_r_read;
    read_image_from_ddr_U0_ap_continue <= ap_continue;
    read_image_from_ddr_U0_ap_start <= ap_start;
    read_image_from_ddr_U0_start_full_n <= ap_const_logic_1;
    read_image_from_ddr_U0_start_write <= ap_const_logic_0;
end behav;
